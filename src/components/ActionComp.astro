---
const { localAction } = Astro.props;

// Calculate colors based on evilness property (0-1 scale)
// Lower evilness = more green (hsl 117), higher evilness = more red (hsl 0)
const backgroundColor = `hsl(${(1 - localAction.evilness) * 117}, 100%, 70%)`;
const content = `hsl(${(1 - localAction.evilness) * 117}, 100%, 90%)`;
const buttonColor = `hsl(${(1 - localAction.evilness) * 117}, 60%, 70%)`
---

<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        <style>
            .dropdown {
                position: relative;
                width: 300px;
                margin: 20px;
            }
            
            .dropdown-header {
                background-color: var(--button-bg);
                padding: 10px;
                text-align: center;
                border: none;
                cursor: pointer;
                font-size: 16px;
                width: 100%;
                border-top-right-radius: 1.7rem;
                border-top-left-radius: 1.7rem;
            }
            
            .dropdown-content {
                background-color: var(--content);
                overflow: hidden;
                max-height: 0;
                padding: 0 10px;
                border: 1px solid #ddd;
                opacity: 0;
                transition: max-height 0.5s ease-out, opacity 0.5s ease-out;
            }
            
            .dropdown-content p {
                margin: 10px 0;
            }

            .dropdown-bottom {
                background-color: var(--bottom-bg);
                overflow: hidden;
                max-height: 0;
                padding: 0 10px;
                border: 1px solid #ddd;
                opacity: 0;
                text-align:center;
                font-size:1.4rem;
                width:100%;
                transition: max-height 0.5s ease-out, opacity 0.5s ease-out;
                border-bottom-right-radius: 1.7rem;
                border-bottom-left-radius: 1.7rem;
            }

            .dropdown.open .dropdown-content {
                max-height: 15rem;
                opacity: 1;
            }

            .dropdown.open .dropdown-bottom {
                max-height: 15rem;
                opacity: 1;
            }
        </style>
    </head>
    <body>
        <div class="dropdown" id={`dropdown-${localAction.id}`} style={`--button-bg: ${backgroundColor}; --content: ${content};`}>
            <button id={`button-${localAction.id}`} class="dropdown-header">{localAction.name}</button>
            <div class="dropdown-content">
                <p>{localAction.summary}</p>
            </div>
            <button id={`seeMore-${localAction.id}`} style={`--bottom-bg: ${buttonColor}`}class="dropdown-bottom">See More</button>
        </div>

        <script define:vars={{localAction}}>
            document.addEventListener("DOMContentLoaded", () => {
                const button = document.getElementById(`button-${localAction.id}`);
                const dropdown = document.getElementById(`dropdown-${localAction.id}`);
                const seeMore = document.getElementById(`seeMore-${localAction.id}`);

                console.log("Dropdown is ", dropdown);

                if (button && dropdown && seeMore) {
                    button.addEventListener('click', () => {
                        dropdown.classList.toggle('open'); // Toggle on parent div
                        console.log("dropdown after toggle is ", dropdown);

                        // Ensure the 'open' class is applied to both content and 'seeMore' button
                        seeMore.classList.toggle('open');
                    });
                }
            });
        </script>
    </body>
</html>
